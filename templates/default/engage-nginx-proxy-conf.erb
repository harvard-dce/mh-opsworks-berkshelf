userid on;
userid_name dce_uid;
userid_expires max;

log_format session_uid '$cookie_JSESSIONID $uid_got';

# increase size of default proxy buffers so that proxied content
# doesn't get written to temp files
proxy_buffers 16 16k;

# if the client closes the request connection (happens a lot)
# don't abort the upstream request as it will sometimes make
# Opencast throw jetty EofExceptions
proxy_ignore_client_abort on;

# prevents http 431/400 errors if e.g. cookies are too large;
# default is 4 buffers of 8k
large_client_header_buffers 4 16k;

# All traffic that comes to http://SOMETHING.harvard.edu will be redirected to https.
# The "harvard.edu" was used to exclude: the internal host name (used by Opencast job dispatching),
# dev clusters that do not bother to set auth/ssl up, local vagrant.
server {
  listen 80;

  server_name ~(.+).harvard.edu;
  return 301 https://$1.harvard.edu$request_uri;
}

server {
  listen 80 default_server;
  listen [::]:80 default_server ipv6only=on;
  directio 1M;

  <% if @certificate_exists %>
  location /admin-ng/login.html {
    return 301 https://$host$request_uri;
  }
  <% end %>

  root /usr/share/nginx/html;
  index index.html index.htm;

  # Make site accessible from http://localhost/
  server_name localhost;

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  client_max_body_size 102400m;
  gzip on;

  add_header 'Access-Control-Allow-Origin' '*';
  add_header 'Access-Control-Allow-Credentials' 'true';
  add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

  location /static {
    alias <%= @shared_storage_root %>/downloads;
  }

  location /usertracking {
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/usertracking;
    access_log /var/log/nginx/session_uid.log session_uid;
    access_log /var/log/nginx/access.log request_time;
  }

  location /admin-ng {
    include /etc/nginx/conf.d/admin_allow.conf;
    deny all;
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/admin-ng;
  }

  location / {
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>;
  }
}

<% if @certificate_exists %>
server {
  listen 443 ssl default_server;
  listen [::]:443 ipv6only=on ssl;
  directio 1M;

  root /usr/share/nginx/html;
  index index.html index.htm;

  ssl_certificate     ssl/certificate.cert;
  ssl_certificate_key ssl/certificate.key;

  # Some settings are recommended by https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
  # Need SSLv3 for IE on some older windows, this is the default set.
  ssl_protocols TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;

  # Make site accessible from http://localhost/
  server_name localhost;

<% unless @old_public_engage_hostname.empty? %>
  # Change matterhorn.dce to opencast.dcex if host is matterhorn.dce and
  # path is not an lti tool (because Canvas does not play well with 301s).
  # This was done here instead of a server block so that we didn't have to
  # duplicate a lot (or create an include of the config that is repeated).
  set $change_host 1;
  # Test for old engage host name (matterhorn.dce)
  if ($host != '<%= @old_public_engage_hostname %>') {
    set $change_host 0;
  }
  # Test for /lti and /lti/player (embedded video)
  if ($uri ~ ^/lti.*) {
    set $change_host 0;
  }
  # Test for /info
  if ($uri ~ ^/info.*) {
    set $change_host 0;
  }
  if ($change_host = 1) {
    return 301 https://<%= @public_engage_hostname %>$request_uri;
  }
<% end %>

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  # Ask opencast to redirect to HTTPS
  proxy_set_header X-Forwarded-SSL on;
  # Rewrite outgoing redirects to be HTTPS
  proxy_redirect http://<%= @public_engage_hostname %>/ https://<%= @public_engage_hostname %>/;
  # Include the old static DNS to protect legacy links
  proxy_redirect http://matterhorn.dce.harvard.edu/ https://matterhorn.dce.harvard.edu/;

  client_max_body_size 102400m;
  gzip on;

  # Avoid the if-is-evil-in-location nginx issue
  # https://stackoverflow.com/questions/27955233/nginx-config-for-cors-add-header-directive-is-not-allowed
  # Defaults for
  # add_header 'Access-Control-Allow-Origin' '*';
  # add_header 'Access-Control-Allow-Credentials' 'true';
  # add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
  set $cors_origin "*";
  set $cors_cred   "true";
  set $cors_method "GET, OPTIONS";
  # No defaults for these
  set $cors_header "";
  set $cors_xframe_option "";
  set $cors_vary "";
  set $cors_expose_headers "";

  if ($http_origin ~* (https?://.*\.<%= @engage_domain_cors_regex %>(:[0-9]+)?)) {
        set $cors_origin $http_origin;
        set $cors_cred   true;
        set $cors_header $http_access_control_request_headers;
        set $cors_method $http_access_control_request_method;
        set $cors_xframe_option 'ALLOW FROM $http_origin';
        set $cors_vary 'Origin';
        set $cors_expose_headers 'Content-Length,Content-Range';
  }
  add_header Access-Control-Allow-Origin      $cors_origin	always;
  add_header Access-Control-Allow-Credentials $cors_cred	always;
  add_header Access-Control-Allow-Headers     $cors_header	always;
  add_header Access-Control-Allow-Methods     $cors_method	always;
  add_header X-Frame-Options                  $cors_xframe_option always;
  add_header Vary                             $cors_vary	always;
  add_header Access-Control-Expose-Headers    $cors_expose_headers always;
  # -- End cors specific headers (nginx omits headers with empty value )-- #

  location /static {
    alias <%= @shared_storage_root %>/downloads;
  }

  location /usertracking {
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/usertracking;
    access_log /var/log/nginx/session_uid.log session_uid;
    access_log /var/log/nginx/access.log request_time;
  }

  location /admin-ng {
    include /etc/nginx/conf.d/admin_allow.conf;
    deny all;
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/admin-ng;
  }

  location / {
    if ($request_method = 'OPTIONS') {
      # Headers set inside an "if" need to be be within a location.
      # Setting headers in this "if" remove headers set earlier.
      # Add CORS headers onto the OPTIONS response
      add_header Access-Control-Allow-Origin      $cors_origin;
      add_header Access-Control-Allow-Credentials $cors_cred;
      add_header Access-Control-Allow-Headers     $cors_header;
      add_header Access-Control-Allow-Methods     $cors_method;
      add_header X-Frame-Options                  $cors_xframe_option;
      add_header Vary                             $cors_vary;
      add_header Access-Control-Expose-Headers    $cors_expose_headers;
      # Tell client that this pre-flight info is valid for 20 days.
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>;
  }
}
<% end %>
