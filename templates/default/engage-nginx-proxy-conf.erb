userid on;
userid_name dce_uid;
userid_expires max;

log_format session_uid '$cookie_JSESSIONID $uid_got';

# increase size of default proxy buffers so that proxied content
# doesn't get written to temp files
proxy_buffers 16 16k;

# if the client closes the request connection (happens a lot)
# don't abort the upstream request as it will sometimes make
# Opencast throw jetty EofExceptions
proxy_ignore_client_abort on;

# All traffic that comes to http://SOMETHING.harvard.edu will be redirected to https.
# The "harvard.edu" was used to exclude: the internal host name (used by Opencast job dispatching),
# dev clusters that do not bother to set auth/ssl up, local vagrant.
server {
  listen 80;

  server_name ~(.+).harvard.edu;
  return 301 https://$1.harvard.edu$request_uri;
}

server {
  listen 80 default_server;
  listen [::]:80 default_server ipv6only=on;
  directio 1M;

  <% if @certificate_exists %>
  location /admin-ng/login.html {
    return 301 https://$host$request_uri;
  }
  <% end %>

  root /usr/share/nginx/html;
  index index.html index.htm;

  # Make site accessible from http://localhost/
  server_name localhost;

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  client_max_body_size 102400m;
  gzip on;

  add_header 'Access-Control-Allow-Origin' '*';
  add_header 'Access-Control-Allow-Credentials' 'true';
  add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

  location /static {
    alias <%= @shared_storage_root %>/downloads;
  }

  location /usertracking {
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/usertracking;
    access_log /var/log/nginx/session_uid.log session_uid;
    access_log /var/log/nginx/access.log request_time;
  }

  location /admin-ng {
    include /etc/nginx/conf.d/admin_allow.conf;
    deny all;
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/admin-ng;
  }

  location / {
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>;
  }
}

<% if @certificate_exists %>
server {
  listen 443 ssl default_server;
  listen [::]:443 ipv6only=on ssl;
  directio 1M;

  root /usr/share/nginx/html;
  index index.html index.htm;

  ssl_certificate     ssl/certificate.cert;
  ssl_certificate_key ssl/certificate.key;

  # Some settings are recommended by https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
  # Need SSLv3 for IE on some older windows, this is the default set.
  ssl_protocols TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;

  # Make site accessible from http://localhost/
  server_name localhost;

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  # Ask opencast to redirect to HTTPS
  proxy_set_header X-Forwarded-SSL on;
  # Rewrite outgoing redirects to be HTTPS
  proxy_redirect http://<%= @public_engage_hostname %>/ https://<%= @public_engage_hostname %>/;
  # Include the old static DNS to protect legacy links
  proxy_redirect http://matterhorn.dce.harvard.edu/ https://matterhorn.dce.harvard.edu/;

  client_max_body_size 102400m;
  gzip on;

  add_header 'Access-Control-Allow-Origin' '*';
  add_header 'Access-Control-Allow-Credentials' 'true';
  add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';

  #
  # CORS header support (OPC-621 Paella Embed API)
  #
  # One way to use this is by placing it into a file called "cors_support"
  # under your Nginx configuration directory and placing the following
  # statement inside your **location** block(s):
  #
  #   include cors_support;
  #
  # As of Nginx 1.7.5, add_header supports an "always" parameter which
  # allows CORS to work if the backend returns 4xx or 5xx status code.
  #
  # For more information on CORS, please see: http://enable-cors.org/
  # Forked from this Gist: https://gist.github.com/michiel/1064640
  # Copied from https://gist.github.com/Stanback/7145487
  #
  set $cors '';
  if ($http_origin ~* (https?://.*\.harvard.edu(:[0-9]+)?)) {
    set $cors "true";
  }
  if ($cors = "true") {
    add_header 'Access-Control-Allow-Origin' '$http_origin';
    add_header 'X-Frame-Options' 'ALLOW FROM $http_origin';
    add_header 'Access-Control-Allow-Methods' 'GET, POST';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization';
    add_header 'Vary' 'Origin';
  }

  location /static {
    alias <%= @shared_storage_root %>/downloads;
  }

  location /usertracking {
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/usertracking;
    access_log /var/log/nginx/session_uid.log session_uid;
    access_log /var/log/nginx/access.log request_time;
  }

  location /admin-ng {
    include /etc/nginx/conf.d/admin_allow.conf;
    deny all;
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>/admin-ng;
  }

  location / {
    proxy_pass http://127.0.0.1:<%= @opencast_backend_http_port %>;
  }
}
<% end %>
