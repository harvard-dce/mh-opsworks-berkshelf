#!/bin/sh

prog="matterhorn"
config="<%= @main_config_file %>"
pidfile="/var/run/${prog}.pid"
<% if @enable_newrelic %>
NEW_RELIC_JAR="<%= @matterhorn_root %>/lib/ext/newrelic/newrelic.jar"
NEWRELIC_CONFIG="-Dnewrelic.config.file=<%= @felix_config_dir %>/newrelic.yml"
<% end %>

# Times to try sending a SIGTERM before sending a SIGKILL
kill_attempts=20
# Time in seconds to sleep between each try
kill_attempts_sleep=1
# The time to wait before the SIGKILL is hence (attempts * attempts_sleep)
# seconds. Do not set this value to low. A “normal” fresh Matterhorn needs
# about seven seconds before its complete shutdown.

# Remove all files from the felix cache (bundle configuration, …)
# This will prevent trouble after package updates.
clean_felix_cache() {
	if [ -d "$FELIX_CACHE_DIR" ]
	then
		rm -rf $FELIX_CACHE_DIR/*
	fi
}

stop_matterhorn() {
	[ ! -f $pidfile ] && return
	pid=`cat $pidfile`
	attempts=1
	kill $pid
	ps p $pid &> /dev/null
	# Wait for termination
	while [ $? -eq 0 ]
	do
		sleep $kill_attempts_sleep
		attempts=$[$attempts+1]
		[ $attempts -gt $kill_attempts ] && kill -s KILL $pid
		ps p $pid &> /dev/null
	done
	rm -f $pidfile
	return 0
}


if [ $# -ne 1 ] || ( [ "$1" != '--daemon' ] && \
	[ "$1" != '--interactive' ] && [ "$1" != '--quit' ] )
then
	echo "Usage: $0 [ --daemon | --interactive | --quit | --help ]"
	echo ''
	echo 'OPTIONS:'
	echo '  --daemon       Run matterhorn as _unmanaged_ daemon.'
	echo '                 Consider using the SysV init script.'
	echo '  --interactive  Run matterhorn in interactive mode.'
	echo '  --quit         Stop a previously started matterhorn.'
	echo '  --help         Show this message.'
	exit 0
fi

# Only root is allowed to start Matterhorn
[ `id -u` -ne 0 ] && echo "User '`id -un`' has insufficient privilege" && exit 4


# Stop Matterhorn if --quit is given
[ "$1" == "--quit" ] && stop_matterhorn && exit 0

# Check if Matterhorn is already running
[ -f $pidfile ] && ps p "`cat $pidfile`" &> /dev/null && \
	echo "Matterhorn already running" && exit 0

# Create the pidfile as quickly as possible after we are shure the user wants
# to start matterhorn and after the existence of a pidfile and the associated
# process was checked. As matterhorn itself is not running at the moment and
# the file should contain a pid to check for we use for now the pid of this
# script:
echo $$ > $pidfile


###
# The following is for the actual Matterhorn start
##

# Load default configuration
MATTERHORN="<%= @matterhorn_root %>"
CA=$MATTERHORN/capture-agent
MATTERHORN_USER=matterhorn
LOGDIR="<%= @matterhorn_log_directory %>"
LOGLEVEL="WARN"
ECLIPSE_LOGLEVEL="SEVERE"
[ -z $DEBUG ] && DEBUG=false
DEBUG_PORT="8000"
DEBUG_SUSPEND="n"
FELIX_CONFIG_DIR="<%= @felix_config_dir %>"
FELIX_WORK_DIR="<%= @matterhorn_root %>"
FELIX_CACHE_DIR="<%= @matterhorn_root %>/tmp/felix-cache"
ADD_OPTS=""
if [ -f $MATTERHORN/lib/matterhorn/matterhorn-capture-agent-impl*.jar ]
then
	IS_CA=true
else
	IS_CA=false
fi

# Load configuration files
[ -e $config ] && . $config

MATTERHORN_NODE_PROFILE=${MATTERHORN_NODE_PROFILE:-hotload}

FELIX="-Dfelix.home=$MATTERHORN"
FELIX="${FELIX} -Dfelix.work=$FELIX_WORK_DIR"
FELIX="${FELIX} -Dfelix.config.properties=file:${FELIX_CONFIG_DIR}/config.properties"
FELIX="${FELIX} -Dfelix.system.properties=file:${FELIX_CONFIG_DIR}/profiles/${MATTERHORN_NODE_PROFILE}.properties"
FELIX="${FELIX} -Dfelix.fileinstall.dir=$FELIX_CONFIG_DIR/load"

LOGGING="-Dopencast.logdir=$LOGDIR"
LOGGING="${LOGGING} -Dbundles.configuration.location=$FELIX_CONFIG_DIR"
LOGGING="${LOGGING} -Djava.util.logging.config.file=$FELIX_CONFIG_DIR/services/java.util.logging.properties"
LOGGING="${LOGGING} -Dorg.ops4j.pax.logging.DefaultServiceLog.level=${LOGLEVEL}"
LOGGING="${LOGGING} -Declipselink.logging.level=${ECLIPSE_LOGLEVEL}"

GRAPHICS="-Djava.awt.headless=true -Dawt.toolkit=sun.awt.HeadlessToolkit"

DISABLE_PHONEHOME="-Dnet.sf.ehcache.skipUpdateCheck=true"
DISABLE_PHONEHOME="${DISABLE_PHONEHOME} -Dorg.terracotta.quartz.skipUpdateCheck=true"

JAVA="-Xms2048m -Xmx<%= @java_xmx_ram %>m -XX:MaxPermSize=1024m"
[ "$1" == '--daemon' ] && GOSH="-Dgosh.args='--noshutdown -c noop=true'"

if $DEBUG
then
	DEBUG="-Xdebug"
	DEBUG="${DEBUG} -Xnoagent"
	DEBUG="${DEBUG} -Xrunjdwp:transport=dt_socket"
	DEBUG="${DEBUG},address=$DEBUG_PORT"
	DEBUG="${DEBUG},server=y"
	DEBUG="${DEBUG},suspend=$DEBUG_SUSPEND"
else
	DEBUG=""
fi

<% if @enable_newrelic %>
NEWRELIC="-javaagent:${NEW_RELIC_JAR} $NEWRELIC_CONFIG"
<% else %>
NEWRELIC=""
<% end %>

<% if @enable_yourkit_agent %>
YOURKIT="-agentpath:<%= @yourkit_dir %>/libyjpagent.so=dir=<%= @yourkit_dir %>,onlylocal"
<% end %>

GC="-Xloggc:${LOGDIR}/gcnormal.log -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps"
GC="${GC} -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime -XX:+PrintHeapAtGC"
GC="${GC} -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=20 -XX:GCLogFileSize=32M"

<% if @enable_G1GC %>
GC="${GC} -XX:+UseG1GC"
<% end %>

MATTERHORN_OPTS="$NEWRELIC $GOSH $DEBUG $FELIX $GRAPHICS $JAVA $LOGGING $DISABLE_PHONEHOME $JMX $GC $YOURKIT $ADD_OPTS"

# Execute Capture-Agent device configuration
$IS_CA && $CA/device_config.sh

# Make sure matterhorn bundles are reloaded
clean_felix_cache

if [ "$1" == "--daemon" ]
then
	# cd to $MATTERHORN since some services use relative paths in configs
	# and trust felix is started from felix.home
  sudo -u $MATTERHORN_USER sh -c "cd $MATTERHORN; java $MATTERHORN_OPTS -jar $MATTERHORN/bin/felix.jar \
          $FELIX_CACHE_DIR &> /dev/null & echo \$!" > $pidfile || ( rm -f $pidfile && exit 2 )
else
	# we set the pid to the process id of this scripts a in this case
	# matterhorn runs synchronous and the pid will indicate that
	# matterhorn is alive
	echo $$ > $pidfile
	set -o monitor
	pushd $MATTERHORN &> /dev/null
	sudo -u $MATTERHORN_USER \
		java $MATTERHORN_OPTS -jar $MATTERHORN/bin/felix.jar \
		$FELIX_CACHE_DIR
	rm -f $pidfile
	popd &> /dev/null
fi
